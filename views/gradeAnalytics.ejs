<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
</head>

<body>
    <h1>Grade Analytics</h1>
    <a href="/">home</a><br>

    <div id="chart" style="display: inline-block; vertical-align: top;"></div>
    <div id="minMaxChart" style="display: inline-block; vertical-align: top;"></div>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script>
        // error is not valid for this ejs to object conversion, you can ignore / suppress it
        var data = JSON.parse(<%- JSON.stringify(data) %>);
        const categories = [...new Set(data.map(d => d.module))];
        const abbrvMap = data.reduce((acc, d) => {
            acc[d.module] = d.ModAbbrv;
            return acc;
        }, {});

        const margin = { top: 28, right: 30, bottom: 100, left: 100 };
        const width = (window.innerWidth * 0.7) - margin.left - margin.right;
        const height = (window.innerHeight * 0.8) - margin.top - margin.bottom;

        // creating chart SVG in div
        const svg = d3.select("#chart")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // all the subjects in the data
        const x = d3.scaleBand()
            .domain(categories)
            .range([0, width])
            .padding(0.1);

        // frequency from 0 to max frequency on y axis
        const y = d3.scaleLinear()
            .domain([0, 100])
            .range([height, 0]);

        // color scale for grades
        const colorScale = d3.scaleLinear()
            .domain([0, 100])
            .range(["red", "green"]);

        // moving the x  axis to the bottom
        // also adding x label
        svg.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x).tickFormat(d => abbrvMap[d]).tickSizeOuter(0))
            .append("text")
            .attr("class", "axis-label")
            .attr("x", width / 2)
            .attr("y", 65)
            .attr("fill", "black")
            .style("text-anchor", "middle")
            .style("font-size", "2rem")
            .text("Modules");
        
        // styling y axes and adding its label
        svg.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(y).tickSizeOuter(0))
            .append("text")
            .attr("class", "axis-label")
            .attr("transform", "rotate(-90)")
            .attr("x", -height / 2)
            .attr("y", -65)
            .attr("fill", "black")
            .style("text-anchor", "middle")
            .style("font-size", "2rem")
            .text("grade %");

        // adding chart title to center
        svg.append("text")
            .attr("x", width / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "1.5rem")
            .text("Student grades by Module");

        // creates Tooltip div
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip") // tooltip class for styling
            .style("position", "absolute")
            .style("background", "#f9f9f9")
            .style("padding", "5px")
            .style("border", "1px solid #d3d3d3")
            .style("border-radius", "5px")
            .style("pointer-events", "none")
            .style("opacity", 0);

        // plotting points on the chart
        svg.selectAll(".dot")
            .data(data) // bind each student to circle
            .enter().append("circle") // new circle for each student that doesn't have a circle
            .attr("class", "dot")
            .attr("cx", d => x(d.module) + x.bandwidth() / 2)
            .attr("cy", d => y(d.grade))
            .attr("r", d => Math.max(d.grade / 10, 5)) // Dot radius relative to the grade, minimum size 5px
            .attr("fill", d => colorScale(d.grade)) // color of the dot based on grade
            .on("mouseover", (event, d) => {
                tooltip.transition().duration(190).style("opacity", .9);
                tooltip.html(`Module: ${d.module}<br> Name: ${d.name}<br>Student ID: ${d.sid}<br> Grade: ${d.grade.toFixed(2)}%`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", () => {
                tooltip.transition().duration(490).style("opacity", 0);
            });

        // Increase the font size of the tick labels and axes labels
        svg.selectAll(".x-axis .tick text")
            .style("font-size", "1rem");

        svg.selectAll(".y-axis .tick text")
            .style("font-size", "1rem");

        // creating min max average chart
        const margin2 = { top: 20 + parseFloat(getComputedStyle(document.documentElement).fontSize) * 1.5, right: 30, bottom: 100, left: 125 };
        const width2 = (window.innerWidth * 0.25) - margin2.left - margin2.right;
        const height2 = (window.innerHeight * 0.85) - margin2.top - margin2.bottom;

        const minMaxAvgSvg = d3.select("#minMaxChart")
            .append("svg")
            .attr("width", width2 + margin2.left + margin2.right)
            .attr("height", height2 + margin2.top + margin2.bottom)
            .append("g")
            .attr("transform", `translate(${margin2.left},${margin2.top})`);
        
        // chart title
        minMaxAvgSvg.append("text")
            .attr("x", width2 / 2)
            .attr("y", -10)
            .attr("text-anchor", "middle")
            .style("font-size", "1.5rem")
            .text("Min Max Avg Module grades");

        // aggregating data for min max average chart
        const minMaxAvgData = categories.map(category => {
            const grades = data.filter(d => d.module === category).map(d => d.grade);
            return {
                module: category,
                min: d3.min(grades),
                max: d3.max(grades),
                avg: d3.mean(grades)
            };
        });

        // creating x axes scaler
        const minMaxAvgX = d3.scaleLinear()
            .domain([0, 100])
            .range([0, width2]);

        // creating y axes scaler
        const minMaxAvgY = d3.scaleBand()
            .domain(categories)
            .range([0, height2])
            .padding(0.1);

        // creating new group for x axes
        minMaxAvgSvg.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${height2})`)
            .call(d3.axisBottom(minMaxAvgX).tickSizeOuter(0))
            .append("text")
            .attr("class", "axis-label")
            .attr("x", width2 / 2)
            .attr("y", 65)
            .attr("fill", "black")
            .style("text-anchor", "middle")
            .style("font-size", "1.25rem")
            .text("grade %");

        // creating new group for y axes
        minMaxAvgSvg.append("g")
            .attr("class", "y-axis")
            .call(d3.axisLeft(minMaxAvgY).tickSizeOuter(0))
            .append("text")
            .attr("class", "axis-label")
            .attr("transform", "rotate(-90)")
            .attr("x", -height2 / 2)
            .attr("y", -75)
            .attr("fill", "black")
            .style("text-anchor", "middle")
            .style("font-size", "1.25rem")
            .text("Modules");

        // create all minimum score bar
        minMaxAvgSvg.selectAll(".min-bar")
            .data(minMaxAvgData)
            .enter().append("rect") // creats rectangle for data that doesn't have dom item
            .attr("class", "min-bar")
            .attr("x", 0)
            .attr("y", d => minMaxAvgY(d.module))
            .attr("width", d => minMaxAvgX(d.min))
            .attr("height", minMaxAvgY.bandwidth() / 3) // 1/3 of free space for each categorie
            .attr("fill", "red");

        // create all maximum score bar
        minMaxAvgSvg.selectAll(".max-bar")
            .data(minMaxAvgData)
            .enter()
            .append("rect")
            .attr("class", "max-bar")
            .attr("x", 0)
            .attr("y", d => minMaxAvgY(d.module) + minMaxAvgY.bandwidth() / 3)
            .attr("width", d => minMaxAvgX(d.max))
            .attr("height", minMaxAvgY.bandwidth() / 3)
            .attr("fill", "green");

        // create all average score bar
        minMaxAvgSvg.selectAll(".avg-bar")
            .data(minMaxAvgData)
            .enter()
            .append("rect")
            .attr("class", "avg-bar")
            .attr("x", 0)
            .attr("y", d => minMaxAvgY(d.module) + 2 * minMaxAvgY.bandwidth() / 3)
            .attr("width", d => minMaxAvgX(d.avg))
            .attr("height", minMaxAvgY.bandwidth() / 3)
            .attr("fill", "blue");

        // Tooltip div for minMaxAvgChart
        const minTooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("position", "absolute")
            .style("background", "#f9f9f9")
            .style("padding", "5px")
            .style("border", "1px solid #FF0000")
            .style("border-radius", "5px")
            .style("pointer-events", "none") // makes sure the tooltip doesn't block the mouse events
            .style("opacity", 0);

        const maxTooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("position", "absolute")
            .style("background", "#f9f9f9")
            .style("padding", "5px")
            .style("border", "1px solid #00FF00")
            .style("border-radius", "5px")
            .style("pointer-events", "none")
            .style("opacity", 0);

        const avgTooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("position", "absolute")
            .style("background", "#f9f9f9")
            .style("padding", "5px")
            .style("border", "1px solid #0000FF")
            .style("border-radius", "5px")
            .style("pointer-events", "none")
            .style("opacity", 0);

        // add tooltip functionality to all min bars
        minMaxAvgSvg.selectAll(".min-bar")
            .on("mouseover", (event, d) => {
                let student = data.filter(student => student.module === d.module && student.grade === d.min);
                let name = student[0].name;
                let sid = student[0].sid;
                minTooltip.transition().duration(190).style("opacity", .9);
                minTooltip.html(`Name: ${name}<br>Student ID: ${sid}<br> Min grade: ${d.min.toFixed(2)}%`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", () => {
                minTooltip.transition().duration(490).style("opacity", 0);
            });
        
         // add tooltip functionality to all max bars
        minMaxAvgSvg.selectAll(".max-bar")
            .on("mouseover", (event, d) => {
                const student = data.filter(item => item.module === d.module && item.grade === d.max);
                let name = student[0].name;
                let sid = student[0].sid;
                maxTooltip.transition().duration(190).style("opacity", .9);
                maxTooltip.html(`Name: ${name}<br>Student ID: ${sid}<br> Max grade: ${d.max.toFixed(2)}%`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", () => {
                maxTooltip.transition().duration(490).style("opacity", 0);
            });
        
        // add tooltip functionality to all avg bars
        minMaxAvgSvg.selectAll(".avg-bar")
            .on("mouseover", (event, d) => {
                avgTooltip.transition().duration(190).style("opacity", .9);
                avgTooltip.html(`Avg grade: ${d.avg.toFixed(2)}%`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
            .on("mouseout", () => {
                avgTooltip.transition().duration(490).style("opacity", 0);
            });
    </script>
</body>

</html>